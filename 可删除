package main

import (
  "fmt"
)

// quickSort is the main function that sorts an array using the quicksort algorithm
func quickSort(arr []int, low, high int) {
  if low < high {
    // pi is partitioning index, arr[pi] is now at right place
    pi := partition(arr, low, high)

    // Recursively sort elements before partition and after partition
    quickSort(arr, low, pi-1)
    quickSort(arr, pi+1, high)
  }
}

// partition takes last element as pivot, places the pivot element at its correct position in sorted array,
// and places all smaller (smaller than pivot) to left of pivot and all greater elements to right of pivot
func partition(arr []int, low, high int) int {
  pivot := arr[high] // pivot
  i := low - 1       // Index of smaller element

  for j := low; j <= high-1; j++ {
    // If current element is smaller than or equal to pivot
    if arr[j] <= pivot {
      i++ // increment index of smaller element
      arr[i], arr[j] = arr[j], arr[i]
    }
  }
  arr[i+1], arr[high] = arr[high], arr[i+1]
  return i + 1
}

func main() {
  arr := []int{10, 7, 8, 9, 1, 5} // Example array
  n := len(arr)
  quickSort(arr, 0, n-1)
  fmt.Println("Sorted array:", arr) // Print the sorted array
}